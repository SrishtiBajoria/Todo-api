// Server Side Programming
// Boring == Interesting
// Backend => Express, MongoDb or Node JS

// First Phase -> 1
// Server Init and Connectivity

const express = require("express");
const dbConnect = require("./config/db");
// Server Init
const app = express();

// DB Connection
dbConnect();

app.use(express.json({ extended: true }));

app.use(require("cors")());

app.use("/api/user", require("./routes/user"));
app.use("/api/task", require("./routes/task"));

// TODO Web App
// Other DB Connections
// 1st Phase Login/Signup
// User Verification
// Password Hashing / Password Comparing
// User DB Save
// Token Generation

// 2nd TASK Routes

// npm i jsonwebtoken mongoose bcryptjs dotenv
// jsonwebtoken => unique token generate krta h during login/signup
// unique token user ID (This unique ID is automatically generated by MongoDB for its every new entity)
// oiajfiaofna98fhaihgsouf 43of9hweihd0284yffiashfasouo => 12345
//  ID will stay inside the token till its expiry

// mongoose => mongoDB

// bcryptjs => vedant1723@gmail.com / vedant1723
// encrypt => nahfioofhndochnd09ztg3hf480fh4289dh3

// Localhost:3000 // 3000 PORT
// Localhost:???? // ???? PORT

// API Calling Methods
// GET,POST,PUT and DELETE
// CRUD Operations
var userArr = [];
// Array of Object => each Object => name,age,id

// 2 tasks
// 1 => Delete Route (DESC=> DELETE USER FROM ARRAY by ID) Hint : arr.splice
// 2.a => Validations => Name didnt get sent => Please enter the Fields
// 2.b => USER A id 1 => USER b id 1 => Error User with same Already Exists

// MERN Stack
// M => MongoDB => No SQL Database
// E => ExpressJs
// R => ReactJs
// N => NodeJs

// localhost:5000

// Local PORT => 5000 // Node JS PORT
// Server Deployment => Local PORT will not Work to resolve this we need to declare global environment PORT

// PORT Declaration
const PORT = process.env.PORT || 5000; // Global || Local

// Server Connecting
app.listen(PORT, () => {
  console.log("Server Connected on PORT:", PORT);
});
